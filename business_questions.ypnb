{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Answering Business Questions using SQL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this project, we'll answer some business questions by working with a modified version of a database. This database is called Chinook, and it contains information about a fictional digital music shop.\n",
    "\n",
    "The Chinook database is eleven tables containing information about the artists, songs, and albums from the store, and also information on the shop's employees, customers, and the purchases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating Helper Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will create some helper functions to run queries and display results as tables easily."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>album</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>artist</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>customer</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>employee</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>genre</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>invoice</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>invoice_line</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>media_type</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>playlist</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>playlist_track</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>track</td>\n",
       "      <td>table</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>tracks</td>\n",
       "      <td>view</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>classify_country_other</td>\n",
       "      <td>view</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>calculate</td>\n",
       "      <td>view</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      name   type\n",
       "0                    album  table\n",
       "1                   artist  table\n",
       "2                 customer  table\n",
       "3                 employee  table\n",
       "4                    genre  table\n",
       "5                  invoice  table\n",
       "6             invoice_line  table\n",
       "7               media_type  table\n",
       "8                 playlist  table\n",
       "9           playlist_track  table\n",
       "10                   track  table\n",
       "11                  tracks   view\n",
       "12  classify_country_other   view\n",
       "13               calculate   view"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import sqlite3\n",
    "\n",
    "# Display dataframe results\n",
    "def run_query(query):\n",
    "    with sqlite3.connect('chinook.db') as conn:\n",
    "        return(pd.read_sql(query, conn))\n",
    "\n",
    "# Run queries that don't return tables\n",
    "def run_command(query):\n",
    "    with sqlite3.connect('chinook.db') as conn:\n",
    "        conn.isolation_level = None #autocommit any changes\n",
    "        conn.execute(query)\n",
    "      \n",
    "# Return a list of all tables and views in our databases\n",
    "def show_tables():\n",
    "    query = '''SELECT name, type\n",
    "                FROM sqlite_master\n",
    "                WHERE type in (\"table\", \"view\");\n",
    "            '''\n",
    "    return run_query(query)\n",
    "\n",
    "show_tables()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Selecting Albums to Purchase"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to select three albums that will be added to the store from a list of four. All four albums are by artists that don't have any tracks in the store right now - we have the genre of music they produce (**Hip-Hop**, **Punk**, **Pop**, **Blues**). \n",
    "\n",
    "Since the Chinook record store has just signed a deal with this record label specialized in artists from the USA, we need to find out which genres sell best in the USA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>genre</th>\n",
       "      <th>num_tracks_sold</th>\n",
       "      <th>tracks_sold_per</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rock</td>\n",
       "      <td>561</td>\n",
       "      <td>0.533777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alternative &amp; Punk</td>\n",
       "      <td>130</td>\n",
       "      <td>0.123692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Metal</td>\n",
       "      <td>124</td>\n",
       "      <td>0.117983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>R&amp;B/Soul</td>\n",
       "      <td>53</td>\n",
       "      <td>0.050428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Blues</td>\n",
       "      <td>36</td>\n",
       "      <td>0.034253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Alternative</td>\n",
       "      <td>35</td>\n",
       "      <td>0.033302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Latin</td>\n",
       "      <td>22</td>\n",
       "      <td>0.020932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Pop</td>\n",
       "      <td>22</td>\n",
       "      <td>0.020932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hip Hop/Rap</td>\n",
       "      <td>20</td>\n",
       "      <td>0.019029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Jazz</td>\n",
       "      <td>14</td>\n",
       "      <td>0.013321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Easy Listening</td>\n",
       "      <td>13</td>\n",
       "      <td>0.012369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Reggae</td>\n",
       "      <td>6</td>\n",
       "      <td>0.005709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Electronica/Dance</td>\n",
       "      <td>5</td>\n",
       "      <td>0.004757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Classical</td>\n",
       "      <td>4</td>\n",
       "      <td>0.003806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Heavy Metal</td>\n",
       "      <td>3</td>\n",
       "      <td>0.002854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Soundtrack</td>\n",
       "      <td>2</td>\n",
       "      <td>0.001903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>TV Shows</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000951</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 genre  num_tracks_sold  tracks_sold_per\n",
       "0                 Rock              561         0.533777\n",
       "1   Alternative & Punk              130         0.123692\n",
       "2                Metal              124         0.117983\n",
       "3             R&B/Soul               53         0.050428\n",
       "4                Blues               36         0.034253\n",
       "5          Alternative               35         0.033302\n",
       "6                Latin               22         0.020932\n",
       "7                  Pop               22         0.020932\n",
       "8          Hip Hop/Rap               20         0.019029\n",
       "9                 Jazz               14         0.013321\n",
       "10      Easy Listening               13         0.012369\n",
       "11              Reggae                6         0.005709\n",
       "12   Electronica/Dance                5         0.004757\n",
       "13           Classical                4         0.003806\n",
       "14         Heavy Metal                3         0.002854\n",
       "15          Soundtrack                2         0.001903\n",
       "16            TV Shows                1         0.000951"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Return the number of tracks sold in the USA for each genre in absolute number and percentages\n",
    "num_tracks = '''WITH usa_sold AS (\n",
    "                SELECT il.* \n",
    "                  FROM invoice_line il\n",
    "                 INNER JOIN invoice i ON il.invoice_id = i.invoice_id\n",
    "                 INNER JOIN customer c ON i.customer_id = c.customer_id\n",
    "                 WHERE c.country = \"USA\")\n",
    "                     \n",
    "                SELECT g.name genre, \n",
    "                       COUNT(usa_sold.invoice_line_id) as num_tracks_sold, \n",
    "                       CAST(COUNT(usa_sold.invoice_line_id) AS FLOAT)/(SELECT COUNT(*)\n",
    "                                                                         FROM usa_sold) \n",
    "                       as tracks_sold_per \n",
    "                  FROM track as t\n",
    "                 INNER JOIN usa_sold ON usa_sold.track_id = t.track_id\n",
    "                 INNER JOIN genre g ON g.genre_id = t.genre_id\n",
    "                 GROUP BY genre\n",
    "                 ORDER BY num_tracks_sold DESC  \n",
    "             '''\n",
    "df_tracks_sold = run_query(num_tracks)\n",
    "run_query(num_tracks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on our options, we recommend buying the albums with the punk, blues, and pop genres that make together 17% of the sales."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzing Employee Sales Performance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each customer for the Chinook store gets assigned to a sales support agent within the company when they first make a purchase. We can see if any sales support agent is performing either better or worse than the other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>hire_date</th>\n",
       "      <th>dollar_amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jane Peacock</td>\n",
       "      <td>2017-04-01 00:00:00</td>\n",
       "      <td>1731.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Margaret Park</td>\n",
       "      <td>2017-05-03 00:00:00</td>\n",
       "      <td>1584.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Steve Johnson</td>\n",
       "      <td>2017-10-17 00:00:00</td>\n",
       "      <td>1393.92</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            name            hire_date  dollar_amount\n",
       "0   Jane Peacock  2017-04-01 00:00:00        1731.51\n",
       "1  Margaret Park  2017-05-03 00:00:00        1584.00\n",
       "2  Steve Johnson  2017-10-17 00:00:00        1393.92"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Return the total dollar amount of sales assigned to each sales support agent and their hire date.\n",
    "dol_sales_support = '''\n",
    "                        SELECT e.first_name ||' '|| e.last_name name, \n",
    "                               e.hire_date, \n",
    "                               SUM(i.total) as dollar_amount\n",
    "                          FROM customer c\n",
    "                         INNER JOIN invoice i ON i.customer_id = c.customer_id\n",
    "                         INNER JOIN employee e ON e.employee_id = c.support_rep_id \n",
    "                         GROUP BY 1\n",
    "                         ORDER BY 3 DESC\n",
    "'''\n",
    "run_query(dol_sales_support)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see some differences among the total dollar amount of sales assigned to each employee. However, we can also see a gap of some months in the hiring date that can explain the change in the total money."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzing Sales by Country"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, our task is to analyze the sales data for customers from each country and make recommendations to the marketing team on which countries have the growth potential. \n",
    "\n",
    "For each country, we will calculate:\n",
    "* total number of customers\n",
    "* total value of sales\n",
    "* average value of sales per customer\n",
    "* average order value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "run_command('''DROP VIEW classify_country_other''')\n",
    "run_command('''DROP VIEW calculate''')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>num_customers</th>\n",
       "      <th>total_sales</th>\n",
       "      <th>avg_sales_per_customer</th>\n",
       "      <th>avg_order_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USA</td>\n",
       "      <td>13</td>\n",
       "      <td>1040.49</td>\n",
       "      <td>80.037692</td>\n",
       "      <td>7.942672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Canada</td>\n",
       "      <td>8</td>\n",
       "      <td>535.59</td>\n",
       "      <td>66.948750</td>\n",
       "      <td>7.047237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>5</td>\n",
       "      <td>427.68</td>\n",
       "      <td>85.536000</td>\n",
       "      <td>7.011148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>France</td>\n",
       "      <td>5</td>\n",
       "      <td>389.07</td>\n",
       "      <td>77.814000</td>\n",
       "      <td>7.781400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>4</td>\n",
       "      <td>334.62</td>\n",
       "      <td>83.655000</td>\n",
       "      <td>8.161463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Czech Republic</td>\n",
       "      <td>2</td>\n",
       "      <td>273.24</td>\n",
       "      <td>136.620000</td>\n",
       "      <td>9.108000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>3</td>\n",
       "      <td>245.52</td>\n",
       "      <td>81.840000</td>\n",
       "      <td>8.768571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Portugal</td>\n",
       "      <td>2</td>\n",
       "      <td>185.13</td>\n",
       "      <td>92.565000</td>\n",
       "      <td>6.383793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>India</td>\n",
       "      <td>2</td>\n",
       "      <td>183.15</td>\n",
       "      <td>91.575000</td>\n",
       "      <td>8.721429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Other</td>\n",
       "      <td>15</td>\n",
       "      <td>1094.94</td>\n",
       "      <td>72.996000</td>\n",
       "      <td>7.448571</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          country  num_customers  total_sales  avg_sales_per_customer  \\\n",
       "0             USA             13      1040.49               80.037692   \n",
       "1          Canada              8       535.59               66.948750   \n",
       "2          Brazil              5       427.68               85.536000   \n",
       "3          France              5       389.07               77.814000   \n",
       "4         Germany              4       334.62               83.655000   \n",
       "5  Czech Republic              2       273.24              136.620000   \n",
       "6  United Kingdom              3       245.52               81.840000   \n",
       "7        Portugal              2       185.13               92.565000   \n",
       "8           India              2       183.15               91.575000   \n",
       "9           Other             15      1094.94               72.996000   \n",
       "\n",
       "   avg_order_value  \n",
       "0         7.942672  \n",
       "1         7.047237  \n",
       "2         7.011148  \n",
       "3         7.781400  \n",
       "4         8.161463  \n",
       "5         9.108000  \n",
       "6         8.768571  \n",
       "7         6.383793  \n",
       "8         8.721429  \n",
       "9         7.448571  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classify_countries = '''CREATE VIEW classify_country_other AS\n",
    "                             SELECT c.customer_id,\n",
    "                                    CASE \n",
    "                                        WHEN (SELECT COUNT(DISTINCT customer_id)\n",
    "                                                FROM customer\n",
    "                                               WHERE c.country = country) = 1\n",
    "                                        THEN 'Other'\n",
    "                                        ELSE c.country\n",
    "                                    END AS country,\n",
    "                                    i.total total,\n",
    "                                    il.*\n",
    "                             FROM invoice_line il\n",
    "                            INNER JOIN invoice i on il.invoice_id = i.invoice_id\n",
    "                            INNER JOIN customer c on c.customer_id = i.customer_id\n",
    "                        '''\n",
    "run_command(classify_countries)\n",
    "calculate_each_country = '''CREATE VIEW calculate AS \n",
    "                                 SELECT country,\n",
    "                                        COUNT(DISTINCT customer_id) num_customers,\n",
    "                                        SUM(unit_price * quantity) total_sales,\n",
    "                                        CAST(SUM(unit_price * quantity) AS FLOAT) / COUNT(DISTINCT customer_id) avg_sales_per_customer,  \n",
    "                                        CAST(SUM(unit_price * quantity) AS FLOAT) / COUNT(DISTINCT invoice_id) avg_order_value,\n",
    "                                        CASE \n",
    "                                            WHEN country = 'Other' THEN 1\n",
    "                                            ELSE 0\n",
    "                                        END AS sort_order\n",
    "                                   FROM classify_country_other\n",
    "                                  GROUP BY country\n",
    "                                  ORDER BY sort_order ASC, total_sales DESC\n",
    "                         '''\n",
    "run_command(calculate_each_country)\n",
    "query = '''SELECT country,\n",
    "                  num_customers,\n",
    "                  total_sales,\n",
    "                  avg_sales_per_customer,\n",
    "                  avg_order_value\n",
    "             FROM calculate; \n",
    "         '''\n",
    "run_query(query)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can say that the Czech Republic and the United Kingdom have potential growth since the Czech Republic has the highest average value of sales per customer and average order value while the United Kingdom has the second-highest average order value. However, the sample for each country is not large, as we can see in the num_customers column. Thus our conclusion doesn't have high reliability."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Albums vs Individual Tracks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The store only allows two ways of purchasing: either a whole album or a collection of one or more individual tracks. \n",
    "However, the management is considering a strategy of purchasing only the most popular tracks from each album instead of every track from an album. That's why in this new question, we need to find out what percentage of purchases are individual tracks vs whole albums to understand the effect of this decision."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>album_or_not</th>\n",
       "      <th>num_invoices</th>\n",
       "      <th>percent_invoices</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Album</td>\n",
       "      <td>114</td>\n",
       "      <td>0.185668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Not Album</td>\n",
       "      <td>500</td>\n",
       "      <td>0.814332</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  album_or_not  num_invoices  percent_invoices\n",
       "0        Album           114          0.185668\n",
       "1    Not Album           500          0.814332"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "purchase_types = '''WITH first_tracks AS \n",
    "                       (SELECT il.invoice_id invoice_id,\n",
    "                               MIN(il.track_id) first_track_id \n",
    "                          FROM invoice_line il\n",
    "                         GROUP BY invoice_id\n",
    "                        )\n",
    "                        \n",
    "                    SELECT album_or_not,\n",
    "                           COUNT(invoice_id) num_invoices,\n",
    "                           CAST(COUNT(invoice_id) AS FLOAT) / (SELECT COUNT(*)\n",
    "                                                                FROM invoice\n",
    "                                                              ) percent_invoices     \n",
    "                      FROM (SELECT first_tracks.*,\n",
    "                                   CASE\n",
    "                                       WHEN (SELECT t1.track_id\n",
    "                                               FROM track t1\n",
    "                                              WHERE t1.album_id = (SELECT t2.album_id \n",
    "                                                                     FROM track t2\n",
    "                                                                    WHERE t2.track_id = first_tracks.first_track_id\n",
    "                                                                     )\n",
    "                                              \n",
    "                                              EXCEPT\n",
    "                                              \n",
    "                                              SELECT il2.track_id\n",
    "                                                FROM invoice_line il2\n",
    "                                               WHERE il2.invoice_id = first_tracks.invoice_id  \n",
    "                                            ) IS NULL\n",
    "                                        AND \n",
    "                                            (SELECT il2.track_id\n",
    "                                               FROM invoice_line il2\n",
    "                                              WHERE il2.invoice_id = first_tracks.invoice_id\n",
    "                                             \n",
    "                                             EXCEPT\n",
    "                                             \n",
    "                                             SELECT t1.track_id\n",
    "                                               FROM track t1\n",
    "                                              WHERE t1.album_id = (SELECT t2.album_id\n",
    "                                                                     FROM track t2\n",
    "                                                                    WHERE t2.track_id = first_tracks.first_track_id\n",
    "                                                                  )\n",
    "                                            ) IS NULL  \n",
    "                                       THEN 'Album'\n",
    "                                       ELSE 'Not Album'\n",
    "                                    END AS 'album_or_not'\n",
    "                              FROM first_tracks \n",
    "                              )\n",
    "                     GROUP BY album_or_not  \n",
    "                 '''\n",
    "run_query(purchase_types)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since almost 20% of the purchases, one-fifth of all invoices, are the whole album, we don't recommend buying only the most popular tracks from each album."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
